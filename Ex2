<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
            <title>D3: Page Temp</title>
            <script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>
            <style type="text/css">
			html {
				margin-left:20px;
			}
			rect:hover {
				fill: orange;
			}	
			svg text {
				pointer-events: none;
			}
			#update {
				color: #76767;
			}
		</style>
	</head>
	<body>

		<script type="text/javascript">

			var w = 600;
			var h = 250;
			var pCount = 0;
			var sortCount = 0;
			var sortOrder = 0;
			var sorted = false;

			var padding = 10;

			var dataset = [ [5, 23, 75], [10, 14, 34], [13, 67, 23], [19, 10, 65], [21, 42, 29], [25, 25, 25], [22, 90, 30], [18, 57, 17], [15, 25, 35], [13, 26, 39], [11, 17, 85], [12, 36, 24], [15, 60, 45], [20, 41, 11], [18, 77, 33], [17, 85, 55], [16, 23, 44], [18, 35, 23], [23, 55, 15], [25, 45, 100] ];

			var order=["1st","2nd","3rd"];

			var xScale = d3.scale.ordinal()
							.domain(d3.range(dataset.length))
							.rangeRoundBands([padding, w - padding], 0.05);

			var yScale = d3.scale.linear()
							.domain([0, d3.max(dataset, function(d) { return d[0]; })])
							.range([padding, h - padding]);

			var svg = d3.select("body")
						.append("svg")
						.attr("width", w)
						.attr("height", h);

    
    svg.selectAll("rect")
        .data(dataset)
        .enter()
        .append("rect")
        .attr("x", function(d,i){
            return i * (w / dataset.length);
        })
        
        .attr("y", function(d) {
            return h - (d[0]*4); //Height minus data value
        })
        
        .attr("width", function(d) {
            return w / dataset.length*(d[1]/100);
        })
        
        .attr("height", function(d) {
            return d[0]*4; //Just the data value
        })
        
        .attr("fill", function(d) {
            return "rgb(0, " + 150 + ", 0)";
        })
        
        .attr("fill-opacity", function(d) {
            return (d[2] * .75) / 100 + .25;
               })

        .on("mouseover", function() {
            d3.select(this)
            .attr("fill", "orange");
            })

        .on("mouseout", function(d) {
            d3.select(this)
           .attr("fill", "rgb(0, " + 150 + ", 0)");
            })
        
        .on("click", function() {
			   		sortCount += 1;
			   		sortBars();
            });


    svg.selectAll("text")
        .data(dataset)
        .enter()
        .append("text")
        .text(function(d) {
            return d[0];
        })
		.attr("text-anchor", "left")
        .attr("x", function(d, i) {
            return i * (w / dataset.length);
        })
        .attr("y", function(d) {
            return h - (d[0] * 4) -9;
        })
        
         .attr("font-family", "sans-serif")
               .attr("font-size", "11px")
               .attr("fill", "blue");


        var sortOrder = false;
        var sortBars = function() {
            
            sortOrder = !sortOrder;
    svg.selectAll("rect, text")
        .sort(function(a, b) {
            if (sortOrder) {
            return d3.ascending(a, b);
                } else {
            return d3.descending(a, b);
                }
            })
        .transition()
        .duration(1000)
        .attr("x", function(d, i) {
        return xScale(i);
        });
        };    
</script>
</body>
</html>
